,sent_id,text,label
0,pagesOfTextToDisplay-1.json_0,"Wrangler: Interactive Visual Specification of Data Transformation Scripts Sean Kandel ∗ , Andreas Paepcke ∗ , Joseph Hellerstein † and Jeffrey Heer ∗ ∗ Stanford University † University of California, Berkeley skandel, paepcke, jheer@cs.stanford.edu hellerstein@cs.berkeley.edu ABSTRACT Though data analysis tools continue to improve, analysts still expend an inordinate amount of time and effort manipulating data and assessing data quality issues.",
1,pagesOfTextToDisplay-1.json_1,"Such ""data wrangling"" regularly involves reformatting data values or layout, correcting erroneous or missing values, and integrating multiple data sources.",
2,pagesOfTextToDisplay-1.json_2,"These transforms are often difficult to specify and difficult to reuse across analysis tasks, teams, and tools.",
3,pagesOfTextToDisplay-1.json_3,"In response, we introduce Wrangler , an interactive system for creating data transformations.",
4,pagesOfTextToDisplay-1.json_4,"Wrangler combines direct manipulation of visualized data with automatic inference of relevant transforms, enabling analysts to iteratively explore the space of applicable operations and preview their effects.",
5,pagesOfTextToDisplay-1.json_5,"Wrangler leverages semantic data types (e.g., geographic locations, dates, classification codes) to aid validation and type conversion.",
6,pagesOfTextToDisplay-1.json_6,"Interactive histories support review, refinement, and annotation of transformation scripts.",
7,pagesOfTextToDisplay-1.json_7,"User study results show that Wrangler significantly reduces specification time and promotes the use of robust, auditable transforms instead of manual editing.",
8,pagesOfTextToDisplay-1.json_8,"Author Keywords Data cleaning, transformation, validation, visualization, programming by demonstration, mixed-initiative interfaces.",
9,pagesOfTextToDisplay-1.json_9,"ACM Classification Keywords H.5.2 Information Interfaces and Presentation: UI INTRODUCTION Despite significant advances in technologies for data management and analysis, it remains time-consuming to inspect a data set and mold it to a form that allows meaningful analysis to begin.",
10,pagesOfTextToDisplay-1.json_10,"Analysts must regularly restructure data to make it palatable to databases, statistics packages, and visualization tools.",
11,pagesOfTextToDisplay-1.json_11,"To improve data quality, analysts must also identify and address issues such as misspellings, missing data, unresolved duplicates, and outliers.",
12,pagesOfTextToDisplay-1.json_12,Our own informal interviews with data analysts have found that these types of transforms constitute the most tedious component of their analytic process.,
13,pagesOfTextToDisplay-1.json_13,Others estimate that data cleaning is responsible for up to 80% of the development time and cost in Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page.,
14,pagesOfTextToDisplay-1.json_14,"To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.",
15,pagesOfTextToDisplay-1.json_15,"CHI 2011 , May 7–12, 2011, Vancouver, BC, Canada.",
16,pagesOfTextToDisplay-1.json_16,Copyright 2011 ACM 978-1-4503-0267-8/11/05...$5.00.,
17,pagesOfTextToDisplay-1.json_17,data warehousing projects [4].,
18,pagesOfTextToDisplay-1.json_18,"Such ""data wrangling"" often requires writing idiosyncratic scripts in programming languages such as Python and Perl, or extensive manual editing using interactive tools such as Microsoft Excel.",
19,pagesOfTextToDisplay-1.json_19,"Moreover, this hurdle discourages many people from working with data in the first place.",
20,pagesOfTextToDisplay-1.json_20,"Sadly, when it comes to the practice of data analysis, ""the tedium is the message.""",
21,pagesOfTextToDisplay-1.json_21,Part of the problem is that reformatting and validating data requires transforms that can be difficult to specify and evaluate.,
22,pagesOfTextToDisplay-1.json_22,"For instance, analysts often split data into meaningful records and attributes—or validate fields such as dates and addresses—using complex regular expressions that are error-prone and tedious to interpret [2, 24].",
23,pagesOfTextToDisplay-1.json_23,"Converting coded values, such as mapping FIPS codes to U.S. state names, requires integrating data from one or more external tables.",
24,pagesOfTextToDisplay-1.json_24,The effects of transforms that aggregate data or rearrange data layout can be particularly hard to conceptualize ahead of time.,
25,pagesOfTextToDisplay-1.json_25,"As data sets grow in size and complexity, discovering data quality issues may be as difficult as correcting them.",
26,pagesOfTextToDisplay-1.json_26,"Of course, transforming and cleaning a data set is only one step in the larger data lifecycle.",
27,pagesOfTextToDisplay-1.json_27,Data updates and evolving schemas often necessitate the reuse and revision of transformations.,
28,pagesOfTextToDisplay-1.json_28,Multiple analysts might use transformed data and wish to review or refine the transformations that were previously applied; the importance of capturing data provenance is magnified when data and scripts are shared.,
29,pagesOfTextToDisplay-1.json_29,"As a result, we contend that the proper output of data wrangling is not just transformed data, but an editable and auditable description of the data transformations applied.",
30,pagesOfTextToDisplay-1.json_30,"This paper presents the design of Wrangler , a system for interactive data transformation.",
31,pagesOfTextToDisplay-1.json_31,We designed Wrangler to help analysts author expressive transformations while simplifying specification and minimizing manual repetition.,
32,pagesOfTextToDisplay-1.json_32,"To do so, Wrangler couples a mixed-initiative user interface with an underlying declarative transformation language .",
33,pagesOfTextToDisplay-1.json_33,"With Wrangler, analysts specify transformations by building up a sequence of basic transforms.",
34,pagesOfTextToDisplay-1.json_34,"As users select data, Wrangler suggests applicable transforms based on the current context of interaction.",
35,pagesOfTextToDisplay-1.json_35,Programming-by-demonstration techniques help analysts specify complex criteria such as regular expressions.,
36,pagesOfTextToDisplay-1.json_36,"To ensure relevance, Wrangler enumerates and rank-orders possible transforms using a model that incorporates user input with the frequency, diversity, and specification difficulty of applicable transform types.",
37,pagesOfTextToDisplay-1.json_37,"To convey the effects of data transforms, Wrangler providesData Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete row 7 Delete empty rows Fill row 7 by copying values from above Fill row 7 by copying values from below Fold using row 7 as a key Fold Year using row 7 as a key Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Year Property_crime_rate 0 Reported crime in Alabama 1 2 2004 4029.3 3 2005 3900 4 2006 3937 5 2007 3974.9 6 2008 4081.9 7 8 Reported crime in Alaska 9 10 2004 3370.9 11 2005 3615 12 2006 3582 13 2007 3373.9 14 2008 2928.3 15 16 Reported crime in Arizona 17 18 2004 5073.3 19 2005 4827 20 2006 4741.6 21 2007 4502.6 22 2008 4087.3 23 24 Reported crime in Arkansas 25 Figure 1.",
38,pagesOfTextToDisplay-1.json_38,The Wrangler Interface.,
39,pagesOfTextToDisplay-1.json_39,"The left panel contains (from top-to-bottom) a history of transforms, a transform selection menu, and automatically suggested transforms based on the current selection.",
40,pagesOfTextToDisplay-1.json_40,Bold text within the transform descriptions indicate parameters that can be clicked and revised.,
41,pagesOfTextToDisplay-1.json_41,The right panel contains an interactive data table; above each column is a data quality meter.,
42,pagesOfTextToDisplay-1.json_42,short natural language descriptions —which users can refine via interactive parameters—and visual previews of transform results.,
43,pagesOfTextToDisplay-1.json_43,These techniques enable analysts to rapidly navigate and assess the space of viable transforms.,
44,pagesOfTextToDisplay-1.json_44,"As analysts transform data, their steps are recorded in a script to facilitate reuse and provide documentation of data provenance.",
45,pagesOfTextToDisplay-1.json_45,"Wrangler's interactive history viewer supports review, refinement, and annotation of these scripts.",
46,pagesOfTextToDisplay-1.json_46,Wrangler's high-level language supports a variety of runtime platforms: Wrangler scripts can be run in a web browser using JavaScript or translated into MapReduce or Python code.,
47,pagesOfTextToDisplay-1.json_47,We also present a controlled user study comparing Wrangler and Excel across a set of data wrangling tasks.,
48,pagesOfTextToDisplay-1.json_48,We find that Wrangler significantly reduces specification time and promotes the use of robust transforms rather than manual editing.,
49,pagesOfTextToDisplay-1.json_49,Wrangler is one piece of a larger effort to address bottlenecks in the data lifecycle by integrating insights and methods from the HCI and database communities.,
50,pagesOfTextToDisplay-1.json_50,RELATED WORK The database and machine learning communities have contributed a number of algorithmic techniques for aiding data cleaning and integration.,
51,pagesOfTextToDisplay-1.json_51,"These techniques include methods for detecting erroneous values [10, 11], information extraction [1, 25], entity resolution [6], type inference [7], and schema matching [9, 21].",
52,pagesOfTextToDisplay-1.json_52,In the Wrangler interface we seek to surface such techniques in an accessible manner.,
53,pagesOfTextToDisplay-1.json_53,A number of commercial and research systems provide graphical interfaces leveraging the above methods.,
54,pagesOfTextToDisplay-1.json_54,"Many of these tools provide interfaces for schema matching or entity resolution [3, 9, 16, 23].",
55,pagesOfTextToDisplay-1.json_55,"Toped ++ [24] is an interface for creating Topes , objects that validate and transform data.",
56,pagesOfTextToDisplay-1.json_56,"Topes support transformations such as text formatting and lookups, but provide little support for filtering, reshaping, or aggregation.",
57,pagesOfTextToDisplay-1.json_57,"Bellman [5] helps users understand the structure and quality of a database, but does not enable transformations.",
58,pagesOfTextToDisplay-1.json_58,Many data cleaning applications apply direct manipulation and programming-by-demonstration (PBD) methods to specific cleaning tasks.,
59,pagesOfTextToDisplay-1.json_59,Users of SWYN [2] build regular expressions by providing example text selections and can evaluate their effect in visual previews.,
60,pagesOfTextToDisplay-1.json_60,Potluck [14] applies simultaneous text editing [19] to merge data sources.,
61,pagesOfTextToDisplay-1.json_61,Karma [26] infers text extractors and transformations for web data from examples entered in a table.,
62,pagesOfTextToDisplay-1.json_62,"Vegemite [18] applies PBD to integrate web data, automates the use of web services, and generates shareable scripts.",
63,pagesOfTextToDisplay-1.json_63,Other interfaces [15] apply PBD to data integration via copy and paste actions.,
64,pagesOfTextToDisplay-1.json_64,"Wrangler applies a number of these techniques: it infers regular expressions from example selections [2] and supports mass editing [14, 19].",
65,pagesOfTextToDisplay-1.json_65,Wrangler uses semantic roles akin to Topes [24] and provides natural language descriptions of transforms [18].,
66,pagesOfTextToDisplay-1.json_66,"However, Wrangler differs in important ways.",
67,pagesOfTextToDisplay-1.json_67,"PBD data tools support text extraction or data integration, but lack operations such as reshaping, aggregation, and missing value imputation.",
68,pagesOfTextToDisplay-1.json_68,Prior tools (except for Vegemite [18]) also do not generate scripts to document provenance.,
69,pagesOfTextToDisplay-1.json_69,Most closely related to Wrangler is prior work on interactive data cleaning.,
70,pagesOfTextToDisplay-1.json_70,Potter's Wheel [22] provides a transformation language for data formatting and outlier detection.,
71,pagesOfTextToDisplay-1.json_71,Wrangler extends the Potter's Wheel language with key differences discussed later.,
72,pagesOfTextToDisplay-1.json_72,"Ajax [8] also provides an interface to specify transforms, with advanced facilities for entity resolution.",
73,pagesOfTextToDisplay-1.json_73,Neither tool provides much support for direct manipulation: interaction is largely restricted to menu-based commands or entering programming statements.,
74,pagesOfTextToDisplay-1.json_74,Google Refine [13] (formerly Freebase GridWorks) leverages Freebase to enable entity resolution and discrepancy detection.,
75,pagesOfTextToDisplay-1.json_75,It provides summarization and filtering support through faceted histograms.,
76,pagesOfTextToDisplay-1.json_76,"Though users can specify some commands graphically, others must be written in a command language.",
77,pagesOfTextToDisplay-1.json_77,"Moreover, the system assumes that input data arrives in a proper tabular format, limiting the forms of data to which it can be applied.",
78,pagesOfTextToDisplay-1.json_78,Wrangler builds on this prior work to contribute novel techniques for specifying data transforms.,
79,pagesOfTextToDisplay-1.json_79,Wrangler provides an inference engine that generates and rank-orders suggested transforms in response to direct manipulation of a data table.,
80,pagesOfTextToDisplay-1.json_80,"Analysts can navigate the space of transforms by directly selecting data, indicating a desired transform via menus, or by modifying a related transform; each of these actions leads Wrangler to further refine the set of suggestions.",
81,pagesOfTextToDisplay-1.json_81,"To help analysts understand the effects of an operation before they commit to it, Wrangler's natural language transform descriptions are augmented by novel transform previews that visualize transform results.",
82,pagesOfTextToDisplay-1.json_82,"In concert, these techniques help analysts iteratively hone in on a desired transformation.",
83,pagesOfTextToDisplay-1.json_83,"USAGE SCENARIO Consider an example wrangling task, using housing crime data from the U.S. Bureau of Justice Statistics.",
84,pagesOfTextToDisplay-1.json_84,"The data were downloaded as a CSV (comma-separated values) file, but are not immediately usable by other tools: the data contains empty lines, U.S. states are organized in disjoint matrices, and the state names are embedded in other text.",
85,pagesOfTextToDisplay-1.json_85,We describe how an analyst can use Wrangler to transform the data into more usable formats (Figures 1–7).,
86,pagesOfTextToDisplay-1.json_86,"The analyst begins by pasting the text of the file into an input box; alternatively, she could upload the file.",
87,pagesOfTextToDisplay-1.json_87,The interface now shows a data table (Fig.,
88,pagesOfTextToDisplay-1.json_88,1).,
89,pagesOfTextToDisplay-1.json_89,"To the left of the table is a panel containing an interactive history, a transform menu, and a transform editor.",
90,pagesOfTextToDisplay-1.json_90,"The history already contains three transforms, as Wrangler inferred that the data was in CSV format and so split the text into rows on newline characters, split the rows into columns on commas, and promoted the first row to be the table header.",
91,pagesOfTextToDisplay-1.json_91,"Note that the analyst could undo any transform by clicking the red undo button (which appears upon mouse-over of a transform), or could modify transform parameters in place.",
92,pagesOfTextToDisplay-1.json_92,"In this case, she has no need.",
93,pagesOfTextToDisplay-1.json_93,The analyst then begins wrangling the file into a usable form.,
94,pagesOfTextToDisplay-1.json_94,"The analyst could specify transforms explicitly by selecting a transform type from the menu and then assigning values to parameters; however, she instead opts to use direct manipulation along with Wrangler's suggestion engine.",
95,pagesOfTextToDisplay-1.json_95,"First, she clicks a row header for an empty row (7) to select it; the transformation editor suggests possible operations in response (Fig.",
96,pagesOfTextToDisplay-1.json_96,1).,
97,pagesOfTextToDisplay-1.json_97,The first suggestion is to delete just the selected row.,
98,pagesOfTextToDisplay-1.json_98,The analyst can navigate the suggestions using the keyboard up and down arrows or by mousing over the description in the editor pane.,
99,pagesOfTextToDisplay-1.json_99,"As she navigates the suggestions, Wrangler previews the effects of the transforms in the data table.",
100,pagesOfTextToDisplay-1.json_100,"For deletions, the preview highlights the candidate deleted rows in red (Fig.",
101,pagesOfTextToDisplay-1.json_101,2).,
102,pagesOfTextToDisplay-1.json_102,The analyst mouses over the suggestion to delete all empty rows in the table and clicks the green add button to execute the transform.,
103,pagesOfTextToDisplay-1.json_103,The system then adds the deletion operation to the history view.,
104,pagesOfTextToDisplay-1.json_104,"The analyst would like to compare data across states, so she now needs to extract the state names and add them to each row of the data.",
105,pagesOfTextToDisplay-1.json_105,"She selects the text 'Alaska' in row 6 of the ""Year"" column.",
106,pagesOfTextToDisplay-1.json_106,Wrangler initially interprets this as selecting text at positions 18-24.,
107,pagesOfTextToDisplay-1.json_107,"The analyst updates Wrangler's Data Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete row 7 Delete empty rows Fill row 7 by copying values from above Fill row 7 by copying values from below Fold using row 7 as a key Fold Year using row 7 as a key Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Year Property_crime_rate 0 Reported crime in Alabama 2 2004 4029.3 3 2005 3900 4 2006 3937 5 2007 3974.9 6 2008 4081.9 8 Reported crime in Alaska 10 2004 3370.9 11 2005 3615 12 2006 3582 13 2007 3373.9 14 2008 2928.3 16 Reported crime in Arizona 18 2004 5073.3 19 2005 4827 20 2006 4741.6 21 2007 4502.6 22 2008 4087.3 24 Reported crime in Arkansas 1 7 9 15 17 23 25 Figure 2.",
108,pagesOfTextToDisplay-1.json_108,Row deletion.,
109,pagesOfTextToDisplay-1.json_109,The analyst selects an empty row and chooses a delete transform.,
110,pagesOfTextToDisplay-1.json_110,Red highlights preview which rows will be deleted.,
111,pagesOfTextToDisplay-1.json_111,"Data Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete empty rows Extract from Year after 'in ' Extract from Year after ' in ' Cut from Year after 'in ' Cut from Year after ' in ' Split Year after 'in ' Split Year after ' in ' Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Year extract Property_crime_rate 0 Reported crime in Alabama 1 2004 4029.3 2 2005 3900 3 2006 3937 4 2007 3974.9 5 2008 4081.9 6 Reported crime in Alaska 7 2004 3370.9 8 2005 3615 9 2006 3582 10 2007 3373.9 11 2008 2928.3 12 Reported crime in Arizona 13 2004 5073.3 14 2005 4827 15 2006 4741.6 16 2007 4502.6 17 2008 4087.3 18 Reported crime in Arkansas 19 2004 4033.1 20 2005 4068 21 2006 4021.6 22 2007 3945.5 23 2008 3843.7 24 Reported crime in California 25 2004 3423.9 Alabama Alaska Arizona Arkansas California Figure 3.",
112,pagesOfTextToDisplay-1.json_112,Text extraction.,
113,pagesOfTextToDisplay-1.json_113,The analyst selects state names to extract them into a new column.,
114,pagesOfTextToDisplay-1.json_114,Yellow highlights show a preview of the result.,
115,pagesOfTextToDisplay-1.json_115,"Data Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete empty rows Extract from Year after 'in ' Set extract's name to State Delete rows where State is null Fill State by copying values from above Fill State by copying values from below Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Year State Property_crime_rate 0 Reported crime in Alabama Alabama 1 2004 4029.3 2 2005 3900 3 2006 3937 4 2007 3974.9 5 2008 4081.9 6 Reported crime in Alaska Alaska 7 2004 3370.9 8 2005 3615 9 2006 3582 10 2007 3373.9 11 2008 2928.3 12 Reported crime in Arizona Arizona 13 2004 5073.3 14 2005 4827 15 2006 4741.6 16 2007 4502.6 17 2008 4087.3 18 Reported crime in Arkansas Arkansas 19 2004 4033.1 20 2005 4068 21 2006 4021.6 22 2007 3945.5 23 2008 3843.7 24 Reported crime in California California 25 2004 3423.9 Alabama Alabama Alabama Alabama Alabama Alaska Alaska Alaska Alaska Alaska Arizona Arizona Arizona Arizona Arizona Arkansas Arkansas Arkansas Arkansas Arkansas California Figure 4.",
116,pagesOfTextToDisplay-1.json_116,Filling missing values.,
117,pagesOfTextToDisplay-1.json_117,"The analyst populates empty cells by clicking the gray bar in the data quality meter above the ""State"" column, and then selecting a fill transform.",
118,pagesOfTextToDisplay-1.json_118,"Data Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete empty rows Extract from Year after 'in ' Set extract's name to State Fill State by copying values from above Delete rows where Year starts with 'Reported' Delete rows where Year contains 'Reported' Extract from Year between positions 0, 8 Extract from Year on 'Reported' Cut from Year between positions 0, 8 Cut from Year on 'Reported' Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Year State Property_crime_rate 1 2004 Alabama 4029.3 2 2005 Alabama 3900 3 2006 Alabama 3937 4 2007 Alabama 3974.9 5 2008 Alabama 4081.9 7 2004 Alaska 3370.9 8 2005 Alaska 3615 9 2006 Alaska 3582 10 2007 Alaska 3373.9 11 2008 Alaska 2928.3 13 2004 Arizona 5073.3 14 2005 Arizona 4827 15 2006 Arizona 4741.6 16 2007 Arizona 4502.6 17 2008 Arizona 4087.3 19 2004 Arkansas 4033.1 20 2005 Arkansas 4068 21 2006 Arkansas 4021.6 22 2007 Arkansas 3945.5 23 2008 Arkansas 3843.7 25 2004 California 3423.9 0 Reported crime in Alabama Alabama 6 Reported crime in Alaska Alaska 12 Reported crime in Arizona Arizona 18 Reported crime in Arkansas Arkansas 24 Reported crime in California California Figure 5.",
119,pagesOfTextToDisplay-1.json_119,Deleting rows.,
120,pagesOfTextToDisplay-1.json_120,"The analyst selects text in an unwanted row and selects a delete operation within the ""Rows"" menu.",
121,pagesOfTextToDisplay-1.json_121,Red highlighting previews which rows will be deleted.,
122,pagesOfTextToDisplay-1.json_122,inference by selecting 'Arizona' in the cell six rows below.,
123,pagesOfTextToDisplay-1.json_123,"Wrangler now suggests extracting text occurring after the string ""in "" (Fig.",
124,pagesOfTextToDisplay-1.json_124,3).,
125,pagesOfTextToDisplay-1.json_125,"The analyst executes this transform and renames the resulting column ""State"".",
126,pagesOfTextToDisplay-1.json_126,She notices that the column is sparsely populated.,
127,pagesOfTextToDisplay-1.json_127,"These missing values are in-Data Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on ',' Promote row 0 to header Delete empty rows Extract from Year after 'in ' Set extract's name to State Fill State by copying values from above Delete rows where Year starts with 'Reported' Drop Year, Property_crime_rate Fold Year, Property_crime_rate using header as a key Fold Year, Property_crime_rate using row 0 as a key Unfold Year on Property_crime_rate Unfold Property_crime_rate on Year Merge Year, Property_crime_rate with glue Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear Next Prev Year State Property_crime_rate 0 2004 Alabama 4029.3 1 2005 Alabama 3900 2 2006 Alabama 3937 3 2007 Alabama 3974.9 4 2008 Alabama 4081.9 5 2004 Alaska 3370.9 6 2005 Alaska 3615 7 2006 Alaska 3582 8 2007 Alaska 3373.9 9 2008 Alaska 2928.3 10 2004 Arizona 5073.3 11 2005 Arizona 4827 12 2006 Arizona 4741.6 13 2007 Arizona 4502.6 14 2008 Arizona 4087.3 State 2004 2005 2006 2007 2008 0 Alabama 1 Alaska 2 Arizona 3 Arkansas 4 California 5 Colorado 6 Connecticut 7 Delaware 8 District of Columbia 9 Florida 10 Georgia 11 Hawaii 12 Idaho 13 Illinois 14 Indiana 15 Iowa 4029.3 3900 3937 3974.9 4081.9 3370.9 3615 3582 3373.9 2928.3 5073.3 4827 4741.6 4502.6 4087.3 4033.1 4068 4021.6 3945.5 3843.7 3423.9 3321 3175.2 3032.6 2940.3 3918.5 4041 3441.8 2991.3 2856.7 2684.9 2579 2575 2470.6 2490.8 3283.6 3118 3474.5 3427.1 3594.7 4852.8 4490 4653.9 4916.3 5104.6 4182.5 4013 3986.2 4088.8 4140.6 4223.5 4145 3928.8 3893.1 3996.6 4795.5 4800 4219.9 4119.3 3566.5 2781 2697 2386.9 2264.2 2116.5 3174.1 3092 3019.6 2935.8 2932.6 3403.6 3460 3464.3 3386.5 3339.6 2904.8 2845 2870.3 2648.6 2440.5 Figure 6.",
128,pagesOfTextToDisplay-1.json_128,Table reshaping.,
129,pagesOfTextToDisplay-1.json_129,"The analyst selects two columns, and then elects to unfold them to create a cross-tabulation.",
130,pagesOfTextToDisplay-1.json_130,A ghosted table overlay previews the result.,
131,pagesOfTextToDisplay-1.json_131,Color highlights show the correspondence of data between the start and end states.,
132,pagesOfTextToDisplay-1.json_132,dicated by the gray bar in the data quality meter above the column.,
133,pagesOfTextToDisplay-1.json_133,The analyst clicks the gray bar and Wrangler suggests transforms for missing values.,
134,pagesOfTextToDisplay-1.json_134,The analyst chooses to fill empty cells with the value from above (Fig.,
135,pagesOfTextToDisplay-1.json_135,4).,
136,pagesOfTextToDisplay-1.json_136,"Looking at the ""Year"" column, the analyst notices a red bar in the data quality meter indicating inconsistent data types.",
137,pagesOfTextToDisplay-1.json_137,"Wrangler has inferred that the column primarily contains numbers, and so has flagged non-numeric values as potential errors.",
138,pagesOfTextToDisplay-1.json_138,She decides to remove the rows containing the text 'Reported'.,
139,pagesOfTextToDisplay-1.json_139,She selects the text 'Reported' in row 0.,
140,pagesOfTextToDisplay-1.json_140,"Wrangler suggests split , extract , and cut transforms, but no delete operations.",
141,pagesOfTextToDisplay-1.json_141,"In response, the analyst selects the Delete command from the Rows menu in the transform editor.",
142,pagesOfTextToDisplay-1.json_142,This action reorders the suggestions so that delete commands have higher ranking.,
143,pagesOfTextToDisplay-1.json_143,She finds the suggestion that deletes the unwanted rows (Fig.,
144,pagesOfTextToDisplay-1.json_144,5) and executes the transform.,
145,pagesOfTextToDisplay-1.json_145,"At this point the analyst has wrangled the data into a proper relational format, sufficient for export to database and visualization tools.",
146,pagesOfTextToDisplay-1.json_146,But now suppose she would like to create a cross-tabulation of crime rates by state and year for subsequent graphing in Excel.,
147,pagesOfTextToDisplay-1.json_147,"She selects the ""Year"" and ""Property_crime_rate"" columns, previews the suggested unfold operation (Fig.",
148,pagesOfTextToDisplay-1.json_148,"6), then executes it to create the desired cross-tab.",
149,pagesOfTextToDisplay-1.json_149,"The unfold operation creates new columns for each unique value found in the ""Year"" column, and reorganizes the ""Property_crime_rate"" values by placing each in the appropriate cell in the resulting matrix.",
150,pagesOfTextToDisplay-1.json_150,The analyst's process results in a transformation script written in a declarative transformation language.,
151,pagesOfTextToDisplay-1.json_151,"The script provides an auditable description of the transformation enabling later inspection, reuse, and modification.",
152,pagesOfTextToDisplay-1.json_152,The analyst can also annotate these transformations with her rationale.,
153,pagesOfTextToDisplay-1.json_153,"By clicking the Export button above the transformation history, the analyst can either save the transformed data or generate runnable code implementing the transformation (Fig.",
154,pagesOfTextToDisplay-1.json_154,7).,
155,pagesOfTextToDisplay-1.json_155,"split( 'data' ).on(NEWLINE).max_splits(NO_MAX) split( 'split' ).on(COMMA).max_splits(NO_MAX) columnName().row(0) delete(isEmpty()) extract( 'Year' ).on( /.*/ ).after( /in / ) columnName( 'extract' ).to( 'State' ) fill( 'State' ).method(COPY).direction(DOWN) delete( 'Year starts with ""Reported""' ) unfold( 'Year' ).above( 'Property_crime_rate' ) dw.wrangle() .push(dwsplit('data').on(dw.",
156,pagesOfTextToDisplay-1.json_156,Regex.,
157,pagesOfTextToDisplay-1.json_157,NEWLINE).max_splits(dwsplit.,
158,pagesOfTextToDisplay-1.json_158,NO_MAX)) .push(dwsplit('split').on(dw.,
159,pagesOfTextToDisplay-1.json_159,Regex.,
160,pagesOfTextToDisplay-1.json_160,TAB).max_splits(dwsplit.,
161,pagesOfTextToDisplay-1.json_161,NO_MAX)) .push(dw.filter(dw.isEmpty())) .push(dw.extract('Year')..on(/.*/)).after(/in /) .push(dw.columnName('match').to('State')) .push(dw.fill('State').method(dw.,
162,pagesOfTextToDisplay-1.json_162,Fill.,
163,pagesOfTextToDisplay-1.json_163,COPY).direction(dw.,
164,pagesOfTextToDisplay-1.json_164,Fill.,
165,pagesOfTextToDisplay-1.json_165,DOWN)) .push(dw.unfold('Year').above('Property_crime_rate')) Figure 7.,
166,pagesOfTextToDisplay-1.json_166,"The result of a data wrangling session is a declarative data cleaning script, shown here as generated JavaScript code.",
167,pagesOfTextToDisplay-1.json_167,The script encodes a step-by-step description of how to operate on input data; a Wrangler runtime evaluates the script to produce transformed data.,
168,pagesOfTextToDisplay-1.json_168,DESIGN PROCESS We based Wrangler on a transformation language with a handful of operators.,
169,pagesOfTextToDisplay-1.json_169,Originally we thought that each of these operators might correspond to a single interaction with example data in a table view.,
170,pagesOfTextToDisplay-1.json_170,"However, after considering different mappings and evaluating their implications, we were unable to devise an intuitive and unambiguous mapping between simple gestures and the full expressiveness of the language.",
171,pagesOfTextToDisplay-1.json_171,A given interaction could imply multiple transforms and multiple interactions might imply the same transform.,
172,pagesOfTextToDisplay-1.json_172,"Although this many-to-many relationship between the language and interaction might complicate our interface, we found the relationship to be relatively sparse in practice: the number of likely transforms for a given gesture is small.",
173,pagesOfTextToDisplay-1.json_173,"As a result, we adopted a mixed-initiative approach [12]; instead of mapping an interaction to a single transform, we surface likely transforms as an ordered list of suggestions.",
174,pagesOfTextToDisplay-1.json_174,"We then focused on rapid means for users to navigate—prune, refine, and evaluate—these suggestions to find a desired transform.",
175,pagesOfTextToDisplay-1.json_175,"Wrangler is a browser-based web application, written in JavaScript.",
176,pagesOfTextToDisplay-1.json_176,In the next section we describe the Wrangler trans-formation language.,
177,pagesOfTextToDisplay-1.json_177,We then present the Wrangler interface and its techniques for navigating suggestion space.,
178,pagesOfTextToDisplay-1.json_178,"Next, we describe Wrangler's mechanisms for verification.",
179,pagesOfTextToDisplay-1.json_179,We go on to discuss the technical details of our inference engine.,
180,pagesOfTextToDisplay-1.json_180,THE WRANGLER TRANSFORMATION LANGUAGE Underlying the Wrangler interface is a declarative data transformation language.,
181,pagesOfTextToDisplay-1.json_181,"Both prior work [8, 17, 22] and empirical data guided the language design.",
182,pagesOfTextToDisplay-1.json_182,As our starting point we used the Potter's Wheel transformation language [22] (which in turn draws from SchemaSQL [17]).,
183,pagesOfTextToDisplay-1.json_183,"Informed by a corpus of data sets gathered from varied sources (e.g., data.gov, NGOs, log files, web APIs), we then extended the language with additional operators for common data cleaning tasks.",
184,pagesOfTextToDisplay-1.json_184,"These include features such as positional operators, aggregation, semantic roles, and complex reshaping operators (e.g., using multiple key rows for cross-tabs).",
185,pagesOfTextToDisplay-1.json_185,"We also introduced conditional mapping operators (e.g., update country to ""U.S."" where state=""California"").",
186,pagesOfTextToDisplay-1.json_186,Language statements manipulate data tables with numbered rows and named columns of data.,
187,pagesOfTextToDisplay-1.json_187,"Wrangler treats raw text as a ""degenerate"" table containing one row and one column.",
188,pagesOfTextToDisplay-1.json_188,"The language consists of eight classes of transforms, described below.",
189,pagesOfTextToDisplay-1.json_189,"Map transforms map one input data row to zero, one, or multiple output rows.",
190,pagesOfTextToDisplay-1.json_190,Delete transforms (one-to-zero) accept predicates determining which rows to remove.,
191,pagesOfTextToDisplay-1.json_191,"One-to-one transforms include extracting , cutting , and splitting values into multiple columns; reformatting; simple arithmetic; and value updates .",
192,pagesOfTextToDisplay-1.json_192,"One-to-many transforms include operations for splitting data into multiple rows, such as splitting a text file on newlines or unnesting arrays and sets.",
193,pagesOfTextToDisplay-1.json_193,Lookups and joins incorporate data from external tables.,
194,pagesOfTextToDisplay-1.json_194,"Wrangler includes extensible lookup tables to support common types of transformations, such as mapping zip codes to state names for aggregation across states.",
195,pagesOfTextToDisplay-1.json_195,Currently Wrangler supports two types of joins: equi-joins and approximate joins using string edit distance.,
196,pagesOfTextToDisplay-1.json_196,These joins are useful for lookups and for correcting typos for known data types.,
197,pagesOfTextToDisplay-1.json_197,Reshape transforms manipulate table structure and schema.,
198,pagesOfTextToDisplay-1.json_198,Wrangler provides two reshaping operators: fold and unfold .,
199,pagesOfTextToDisplay-1.json_199,"Fold collapses multiple columns to two or more columns containing key-value sets, while an unfold creates new column headers from data values; see [22] for an extended discussion.",
200,pagesOfTextToDisplay-1.json_200,Reshaping enables higher-order data restructuring and is common in tools such as R and Excel Pivot Tables.,
201,pagesOfTextToDisplay-1.json_201,Positional transforms include fill and lag operations.,
202,pagesOfTextToDisplay-1.json_202,Fill operations generate values based on neighboring values in a row or column and so depend on the sort order of the table.,
203,pagesOfTextToDisplay-1.json_203,"For example, an analyst might fill empty cells with preceding non-empty values.",
204,pagesOfTextToDisplay-1.json_204,The lag operator shifts the values of a column up or down by a specified number of rows.,
205,pagesOfTextToDisplay-1.json_205,"The language also includes functions for sorting , aggregation (e.g., sum, min, max, mean, standard deviation), and key generation (a.k.a.,",
206,pagesOfTextToDisplay-1.json_206,skolemization ).,
207,pagesOfTextToDisplay-1.json_207,"Finally, the language contains schema transforms to set column names, specify column data types, and assign semantic roles.",
208,pagesOfTextToDisplay-1.json_208,"To aid data validation and transformation, Wrangler supports standard data types (e.g., integers, numbers, strings) and higher-level semantic roles (e.g., geographic location, classification codes, currencies).",
209,pagesOfTextToDisplay-1.json_209,Data types comprise standard primitives and associated parsing functions.,
210,pagesOfTextToDisplay-1.json_210,"Semantic roles consist of additional functions for parsing and formatting values, plus zero or more transformation functions that map between related roles.",
211,pagesOfTextToDisplay-1.json_211,"As an example, consider a semantic role defining a zip code .",
212,pagesOfTextToDisplay-1.json_212,"The zip code role can check that a zip code parses correctly (i.e., is a 5 digit number) and that it is a valid zip code (checking against an external dictionary of known zipcodes).",
213,pagesOfTextToDisplay-1.json_213,"The zip code role can also register mapping functions, e.g., to return the containing state or a central lat-lon coordinate.",
214,pagesOfTextToDisplay-1.json_214,"Wrangler leverages types and roles for parsing, validation, and transform suggestion.",
215,pagesOfTextToDisplay-1.json_215,"The Wrangler semantic role system is extensible, but currently supports a limited set of common roles such as geographic locations, government codes, currencies, and dates.",
216,pagesOfTextToDisplay-1.json_216,The Wrangler language design co-evolved with the interface described in subsequent sections.,
217,pagesOfTextToDisplay-1.json_217,We sought a consistent mapping between the transforms shown in the interface and statements in the language.,
218,pagesOfTextToDisplay-1.json_218,"Disconnects between the two might cause confusion [20], particularly when analysts try to interpret code-generated scripts.",
219,pagesOfTextToDisplay-1.json_219,"As a result, we chose to introduce redundancy in the language by adding operators for high-level actions that are commonly needed but have unintuitive lower-level realizations (e.g., positional operators can be realized using key transforms, self-joins, and scalar functions).",
220,pagesOfTextToDisplay-1.json_220,The result is a clear one-to-one mapping between transforms presented in the interface and statements in output scripts.,
221,pagesOfTextToDisplay-1.json_221,"Prior work [17, 22] proves that our basic set of transforms is sufficient to handle all one-to-one and one-tomany transforms.",
222,pagesOfTextToDisplay-1.json_222,"Through both our own practice and discussions with analysts, we believe our extended language is sufficient to handle a large variety of data wrangling tasks.",
223,pagesOfTextToDisplay-1.json_223,THE WRANGLER INTERFACE DESIGN The goal of the Wrangler interface is to enable analysts to author expressive transformations with minimal difficulty and tedium.,
224,pagesOfTextToDisplay-1.json_224,"To this aim, our interface combines direct manipulation, automatic suggestion, menu-based transform selection, and manual editing of transform parameters.",
225,pagesOfTextToDisplay-1.json_225,This synthesis of techniques enables analysts to navigate the space of transforms using the means they find most convenient.,
226,pagesOfTextToDisplay-1.json_226,Both novices and experts can find it difficult to specify transform parameters such as regular expressions.,
227,pagesOfTextToDisplay-1.json_227,"While direct manipulation selections can help, inference is required to suggest transforms without programming.",
228,pagesOfTextToDisplay-1.json_228,"To reduce this gulf of execution [20], Wrangler uses an inference engine that suggests data transformations based on user input, data type or semantic role, and a number of empirically-derived heuristics.",
229,pagesOfTextToDisplay-1.json_229,These suggestions are intended to facilitate the discovery and application of more complicated transforms.,
230,pagesOfTextToDisplay-1.json_230,"However, suggested transforms (and their consequences) may be difficult to understand.",
231,pagesOfTextToDisplay-1.json_231,"To reduce this gulf of evaluation [20], Wrangler provides natural language descriptions and visual transform previews .",
232,pagesOfTextToDisplay-1.json_232,Natural language descriptions areintended to enhance analysts' ability to review and refine transformation steps.,
233,pagesOfTextToDisplay-1.json_233,Textual annotations enable communication of analyst intent.,
234,pagesOfTextToDisplay-1.json_234,Wrangler also couples verification (run in the background as data is transformed) with visualization to help users discover data quality issues.,
235,pagesOfTextToDisplay-1.json_235,Basic Interactions The Wrangler interface supports six basic interactions within the data table.,
236,pagesOfTextToDisplay-1.json_236,"Users can select rows, select columns, click bars in the data quality meter, select text within a cell, edit data values within the table (for mass editing [14, 19]), and assign column names, data types or semantic roles.",
237,pagesOfTextToDisplay-1.json_237,Users can also choose transforms from the menu or refine suggestions by editing transform descriptions as described below.,
238,pagesOfTextToDisplay-1.json_238,"Automated Transformation Suggestions As a user interacts with data, Wrangler generates a list of suggested transforms .",
239,pagesOfTextToDisplay-1.json_239,"In some cases the set of possible suggestions is large (in the hundreds), but we wish to show only a relevant handful to avoid overload.",
240,pagesOfTextToDisplay-1.json_240,"Instead of enumerating the entire suggestion space, users can prune and reorder the space in three ways.",
241,pagesOfTextToDisplay-1.json_241,"First, users can provide more examples to disambiguate input to the inference engine.",
242,pagesOfTextToDisplay-1.json_242,"Providing examples is especially effective for text selections needed for splitting, extraction, and reformatting; two or three wellchosen examples typically suffice.",
243,pagesOfTextToDisplay-1.json_243,"Second, users can filter the space of transforms by selecting an operator from the transform menu.",
244,pagesOfTextToDisplay-1.json_244,"Third, users can edit a transform by altering the parameters of a transform to a desired state.",
245,pagesOfTextToDisplay-1.json_245,Wrangler does not immediately execute a selected suggestion.,
246,pagesOfTextToDisplay-1.json_246,"Instead, Wrangler makes it the current working transform .",
247,pagesOfTextToDisplay-1.json_247,"The user can edit this transform directly; as a user edits parameters, the suggestion space updates to reflect these edits.",
248,pagesOfTextToDisplay-1.json_248,"Also, a user can instead interact with the table to generate new suggestions that use the working transform as context.",
249,pagesOfTextToDisplay-1.json_249,"Natural Language Descriptions To aid apprehension of suggested transforms, Wrangler generates short natural language descriptions of the transform type and parameters.",
250,pagesOfTextToDisplay-1.json_250,"These descriptions are editable, with parameters presented as bold hyperlinks (Fig.",
251,pagesOfTextToDisplay-1.json_251,8).,
252,pagesOfTextToDisplay-1.json_252,Clicking a link reveals an in-place editor appropriate to the parameter (Fig.,
253,pagesOfTextToDisplay-1.json_253,8b).,
254,pagesOfTextToDisplay-1.json_254,Enumerable variables (such as the direction of a fill) are mapped to drop-down menus while free-form text parameters are mapped to text editors with autocomplete.,
255,pagesOfTextToDisplay-1.json_255,We designed these descriptions to be concise; default parameters that are not critical to understanding may be omitted.,
256,pagesOfTextToDisplay-1.json_256,"For example, the unless between parameter for split operations indicates regions of text to ignore while splitting.",
257,pagesOfTextToDisplay-1.json_257,"In most cases, this parameter is left undefined and including it would bloat the description.",
258,pagesOfTextToDisplay-1.json_258,"To edit hidden parameters, users can click the expansion arrow to the left of the description, revealing an editor with entries for all possible parameters.",
259,pagesOfTextToDisplay-1.json_259,We also sought to make parameters within descriptions readable by non-experts.,
260,pagesOfTextToDisplay-1.json_260,"For instance, we translate regular expressions into natural language via pattern substitution (e.g., (\d+) to 'number').",
261,pagesOfTextToDisplay-1.json_261,This translation can make some descriptions less concise but increases readability.,
262,pagesOfTextToDisplay-1.json_262,Translation is Figure 8.,
263,pagesOfTextToDisplay-1.json_263,Editable Natural Language Descriptions. (,
264,pagesOfTextToDisplay-1.json_264,a) An example of an editable description; highlighted text indicates editable parameters. (,
265,pagesOfTextToDisplay-1.json_265,b) Clicking on a parameter reveals an in-place editor. (,
266,pagesOfTextToDisplay-1.json_266,"c) After editing, the description may update to include new parameters.",
267,pagesOfTextToDisplay-1.json_267,"In this case, a new window size parameter is displayed for the moving average.",
268,pagesOfTextToDisplay-1.json_268,only performed with regular expressions generated by the Wrangler inference engine.,
269,pagesOfTextToDisplay-1.json_269,"If a user types in a custom expression, Wrangler will reflect their input.",
270,pagesOfTextToDisplay-1.json_270,Visual Transformation Previews Wrangler uses visual previews to enable users to quickly evaluate the effect of a transform.,
271,pagesOfTextToDisplay-1.json_271,"For most transforms, Wrangler displays these previews in the source data, and not as a separate visualization (e.g., side-by-side before and after views).",
272,pagesOfTextToDisplay-1.json_272,In-place previews provide a visual economy that serves a number of goals.,
273,pagesOfTextToDisplay-1.json_273,"First, displaying two versions of a table inherently forces both versions to be small, which is particularly frustrating when the differences are sparse.",
274,pagesOfTextToDisplay-1.json_274,"Second, presenting in-place modifications draws user attention to the effect of the transformation in its original context, without requiring a shift in focus across multiple tables.",
275,pagesOfTextToDisplay-1.json_275,"As we discuss next, in-place previews better afford direct manipulation for users to revise the current transform.",
276,pagesOfTextToDisplay-1.json_276,"Wrangler maps transforms to at least one of five preview classes: selection, deletion, update, column and table.",
277,pagesOfTextToDisplay-1.json_277,"In defining these mappings, we attempted to convey a transform's effect with minimum displacement of the original data.",
278,pagesOfTextToDisplay-1.json_278,"This stability allows users to continue interacting with the original data, e.g., to provide new selection examples.",
279,pagesOfTextToDisplay-1.json_279,Selection previews highlight relevant regions of text in all affected cells (Fig.,
280,pagesOfTextToDisplay-1.json_280,3).,
281,pagesOfTextToDisplay-1.json_281,Deletion previews color to-be-deleted cells in red (Fig.,
282,pagesOfTextToDisplay-1.json_282,2).,
283,pagesOfTextToDisplay-1.json_283,Update previews overwrite values in a column and indicate differences with yellow highlights (Fig.,
284,pagesOfTextToDisplay-1.json_284,4).,
285,pagesOfTextToDisplay-1.json_285,"Column previews display new derived columns, e.g., as results from an extract operation (Fig.",
286,pagesOfTextToDisplay-1.json_286,3).,
287,pagesOfTextToDisplay-1.json_287,We show a sideby-side display of versions when previewing fold and unfold transforms.,
288,pagesOfTextToDisplay-1.json_288,These alter the structure of the table to such an extent that the best preview is to show another table (Fig.,
289,pagesOfTextToDisplay-1.json_289,"6, 9).",
290,pagesOfTextToDisplay-1.json_290,These table previews use color highlights to match input data to their new locations in the output table.,
291,pagesOfTextToDisplay-1.json_291,"Some transforms map to multiple classes; e.g., extract transforms use both selection and column previews.",
292,pagesOfTextToDisplay-1.json_292,"When possible, previews also indicate where the user can modify the transform through either direct manipulation or description refinement.",
293,pagesOfTextToDisplay-1.json_293,Highlighting selected text or cells works well for certain transformations.,
294,pagesOfTextToDisplay-1.json_294,"For example, byData Wrangler Export Import Split data repeatedly on newline into rows Split split repeatedly on "","" Promote row 0 to header Delete rows 0,1 Fill row 0 by copying values from the left Transform Script Text Split Cut Columns Fill Drop Rows Delete Fill Promote Table Fold Unfold Clear split split1 split2 split3 split4 0 2004 2004 2004 2003 1 STATE Participation Rate 2004 Mean SAT I Verbal Mean SAT I Math Participation Rate 2003 2 New York 87 497 510 82 3 Connecticut 85 515 515 84 4 Massachusetts 85 518 523 82 5 New Jersey 83 501 514 85 6 New Hampshire 80 522 521 75 7 D.C. 77 489 476 77 8 Maine 76 505 501 70 9 Pennsylvania 74 501 502 73 10 Delaware 73 500 499 73 11 Georgia 73 494 493 66 split fold fold1 value 0 New York 2004 Participation Rate 2004 1 New York 2004 Mean SAT I Verbal 2 New York 2004 Mean SAT I Math 3 New York 2003 Participation Rate 2003 4 New York 2003 Mean SAT I Verbal 5 New York 2003 Mean SAT I Math 6 Connecticut 2004 Participation Rate 2004 7 Connecticut 2004 Mean SAT I Verbal 8 Connecticut 2004 Mean SAT I Math 9 Connecticut 2003 Participation Rate 2003 10 Connecticut 2003 Mean SAT I Verbal 11 Connecticut 2003 Mean SAT I Math 12 Massachusetts 2004 Participation Rate 2004 87 497 510 82 496 510 85 515 515 84 512 514 85 Figure 9.",
295,pagesOfTextToDisplay-1.json_295,Visual preview of a fold operation.,
296,pagesOfTextToDisplay-1.json_296,"For transforms that rearrange table layout, Wrangler previews the output table and uses color highlights to show the correspondence of values across table states.",
297,pagesOfTextToDisplay-1.json_297,"highlighting the text selected by a regular expression in each cell, users can determine which examples they need to fix.",
298,pagesOfTextToDisplay-1.json_298,"For reshape transforms, Wrangler highlights the input data in the same color as the corresponding output in the secondary table.",
299,pagesOfTextToDisplay-1.json_299,"For instance, in a fold operation, data values that will become keys are colored to match the keys in the output table (Fig.",
300,pagesOfTextToDisplay-1.json_300,9).,
301,pagesOfTextToDisplay-1.json_301,Wrangler also highlights the parameters in the transform description using the same colors as those generated in previews (Fig.,
302,pagesOfTextToDisplay-1.json_302,3–6).,
303,pagesOfTextToDisplay-1.json_303,The consistent use of colors allows users to associate clauses in a description with their effects in the table.,
304,pagesOfTextToDisplay-1.json_304,"Transformation Histories and Export As successive transforms are applied, Wrangler adds their descriptions to an interactive transformation history viewer .",
305,pagesOfTextToDisplay-1.json_305,Users can edit individual transform descriptions and selectively enable and disable prior transforms.,
306,pagesOfTextToDisplay-1.json_306,"Upon changes, Wrangler runs the edited script and updates the data table.",
307,pagesOfTextToDisplay-1.json_307,Toggling or editing a transform may result in downstream errors; Wrangler highlights broken transforms in red and provides an error message to aid debugging.,
308,pagesOfTextToDisplay-1.json_308,Wrangler scripts also support lightweight text annotations.,
309,pagesOfTextToDisplay-1.json_309,Analysts can use annotations to document their rationale for a particular transform and may help future users better understand data provenance.,
310,pagesOfTextToDisplay-1.json_310,"To annotate a transform, users can click the edit icon next to the desired transform and write their annotation in the resulting text editor.",
311,pagesOfTextToDisplay-1.json_311,Users can view an annotation by mousing over the same edit icon.,
312,pagesOfTextToDisplay-1.json_312,These annotations appear as comments in code-generated scripts.,
313,pagesOfTextToDisplay-1.json_313,Users can export both generated scripts and transformed data; clicking the Export button in the transform history invokes export options.,
314,pagesOfTextToDisplay-1.json_314,"Analysts can later run saved or exported scripts on new data sources, modifying the script as needed.",
315,pagesOfTextToDisplay-1.json_315,"TYPES, ROLES, AND VERIFICATION It is often difficult to discover data quality issues and therefore difficult to address them by constructing the appropriate transform.",
316,pagesOfTextToDisplay-1.json_316,Wrangler aids discovery of data quality issues through the use of data types and semantic roles.,
317,pagesOfTextToDisplay-1.json_317,"As users transform data, Wrangler attempts to infer the data type and semantic role for each column.",
318,pagesOfTextToDisplay-1.json_318,"Wrangler applies validation functions to a sample of a column's data to infer these types, assigning the type that validates for over half of the non-missing values.",
319,pagesOfTextToDisplay-1.json_319,"When multiple types satisfy this criteria, Wrangler assigns the more specific one (e.g., integer is more specific than double ).",
320,pagesOfTextToDisplay-1.json_320,Wrangler infers semantic roles analogously.,
321,pagesOfTextToDisplay-1.json_321,"An icon in the column header indicates the semantic role of the column, or the underlying data type if no role has been assigned.",
322,pagesOfTextToDisplay-1.json_322,Clicking the icon reveals a menu with which users can manually assign a type or role.,
323,pagesOfTextToDisplay-1.json_323,Above each column is a data quality meter : a divided bar chart that indicates the proportion of values in the column that verify completely.,
324,pagesOfTextToDisplay-1.json_324,"Values that parse successfully are indicated in green; values that match the type but do not match the role (e.g., a 6 digit zip code) are shown in yellow; those that do not match the type (e.g., 'One' does not parse as an integer) are shown in red; and missing data are shown in gray.",
325,pagesOfTextToDisplay-1.json_325,Clicking a bar generates suggested transforms for that category.,
326,pagesOfTextToDisplay-1.json_326,"For instance, clicking the missing values bar will suggest transforms to fill in missing values or delete those rows.",
327,pagesOfTextToDisplay-1.json_327,Clicking the fails role bar will suggest transforms such as a similarity join on misspelled country names.,
328,pagesOfTextToDisplay-1.json_328,"THE WRANGLER INFERENCE ENGINE We now present the design of the Wrangler inference engine, which is responsible for generating a ranked list of suggested transforms.",
329,pagesOfTextToDisplay-1.json_329,"Inputs to the engine consist of user interactions; the current working transform; data descriptions such as column data types, semantic roles, and summary statistics; and a corpus of historical usage statistics.",
330,pagesOfTextToDisplay-1.json_330,"Transform suggestion proceeds in three phases: inferring transform parameters from user interactions, generating candidate transforms from inferred parameters, and finally ranking the results.",
331,pagesOfTextToDisplay-1.json_331,"Usage Corpus and Transform Equivalence To generate and rank transforms, Wrangler's inference engine relies on a corpus of usage statistics.",
332,pagesOfTextToDisplay-1.json_332,The corpus consists of frequency counts of transform descriptors and initiating interactions.,
333,pagesOfTextToDisplay-1.json_333,We built our initial corpus by wrangling our collection of gathered data sets.,
334,pagesOfTextToDisplay-1.json_334,The corpus updates over time as more analysts use Wrangler.,
335,pagesOfTextToDisplay-1.json_335,"For any given transform, we are unlikely to find an exact match in the corpus.",
336,pagesOfTextToDisplay-1.json_336,"For instance, an analyst may perform a fold operation over a combination of columns and rows that does not appear in the corpus.",
337,pagesOfTextToDisplay-1.json_337,"In order to get useful transform frequencies, we define a relaxed matching routine: two transforms are considered equivalent in our corpus if (a) they have an identical transform type (e.g., extract or fold ) and (b) they have equivalent parameters as defined below.",
338,pagesOfTextToDisplay-1.json_338,"Wrangler transforms accept four basic types of parameters: row, column or text selections and enumerables.",
339,pagesOfTextToDisplay-1.json_339,We treat two row selections as equivalent if they both (a) contain filtering conditions (either indexor predicate-based) or (b) match all rows in a table.,
340,pagesOfTextToDisplay-1.json_340,Column selections are equivalent if they refer to columns with the same data type or semantic role.,
341,pagesOfTextToDisplay-1.json_341,We based this rule on the observation that transforms that operate on identical data types are more likely to be similar.,
342,pagesOfTextToDisplay-1.json_342,Text selections are equivalent if both (a) are indexbased selections or (b) contain regular expressions.,
343,pagesOfTextToDisplay-1.json_343,We con-sider enumerable parameters equivalent only if they match exactly.,
344,pagesOfTextToDisplay-1.json_344,We chose these equivalency classes based on exploratory analysis of our corpus and they seem to work well in practice.,
345,pagesOfTextToDisplay-1.json_345,"As our corpus of transforms grows with more use, we plan to explore more principled approaches (such as clustering) to refine our matching routines.",
346,pagesOfTextToDisplay-1.json_346,"Inferring Parameter Sets from User Interaction In response to user interaction, Wrangler attempts to infer three types of transform parameters: row, column, or text selections.",
347,pagesOfTextToDisplay-1.json_347,"For each type we enumerate possible parameter values, resulting in a collection of inferred parameter sets.",
348,pagesOfTextToDisplay-1.json_348,We infer a parameter's values independent of the other parameters.,
349,pagesOfTextToDisplay-1.json_349,"For example, we infer regular expressions for text selection based solely on the selected text, a process otherwise independent of which rows or columns are selected.",
350,pagesOfTextToDisplay-1.json_350,We infer row selections based on row indices and predicate matching.,
351,pagesOfTextToDisplay-1.json_351,"We list predicates of the form ""row is empty"" and ""column [equals | starts with | ends with | contains] selectedvalue"", then emit the selections that match the rows and text currently selected in the interface.",
352,pagesOfTextToDisplay-1.json_352,For column selections we simply return the columns that users have interacted with.,
353,pagesOfTextToDisplay-1.json_353,Emitted text selections are either simple index ranges (based directly on selections in the interface) or inferred regular expressions.,
354,pagesOfTextToDisplay-1.json_354,"To generate regular expressions, we tokenize the text within a cell and extract both the selected text and any surrounding text within a 5 token window.",
355,pagesOfTextToDisplay-1.json_355,"We annotate tokens with one or more labels of the form number , word , uppercase word, lowercase word, or whitespace .",
356,pagesOfTextToDisplay-1.json_356,"We then enumerate label sequences that match the text before, within, and after the selection range (see Fig.",
357,pagesOfTextToDisplay-1.json_357,10); sequences can contain either an annotation label or the exact token text.,
358,pagesOfTextToDisplay-1.json_358,"Next we emit all possible combinations of before, within, and after sequences that match all current text selection examples in the interface.",
359,pagesOfTextToDisplay-1.json_359,It is then straightforward to translate matching label sequences into regular expressions.,
360,pagesOfTextToDisplay-1.json_360,"Generating Suggested Transforms After inferring parameter sets, Wrangler generates a list of transform suggestions.",
361,pagesOfTextToDisplay-1.json_361,"For each parameter set, we loop over each transform type in the language, emitting the types that can accept all parameters in the set.",
362,pagesOfTextToDisplay-1.json_362,"For example, a split transform can accept a parameter set containing a text selection, but an unfold transform can not.",
363,pagesOfTextToDisplay-1.json_363,Wrangler instantiates each emitted transform with parameters from the parameter set.,
364,pagesOfTextToDisplay-1.json_364,"To determine values for missing parameters, we query the corpus for the top-k (default 4) parameterizations that cooccur most frequently with the provided parameter set.",
365,pagesOfTextToDisplay-1.json_365,"During this process we do not infer complex criteria such as row predicates or regular expressions; we do infer enumerable parameters, index-based row selections, and column inputs.",
366,pagesOfTextToDisplay-1.json_366,"We then filter the suggestion set to remove ""degenerate"" (noop) transforms that would have no effect on the data.",
367,pagesOfTextToDisplay-1.json_367,Ranking Suggested Transforms Wrangler then rank-orders transform suggestions according to five criteria.,
368,pagesOfTextToDisplay-1.json_368,The first three criteria rank transforms by their type; the remaining two rank transforms within types. (,
369,pagesOfTextToDisplay-1.json_369,"a) Reported crime in Alabama (b) before : {'in', ' '} 'Alabama' → {'Alabama', word } selection : {'Alabama'} 'in' → {'in', word , lowercase } after : ∅ ' ' → {' '} (c) before : {(' '), ('in', ' '), ( word , ' '), ( lowercase , ' ')} selection : {('Alabama'), ( word )} after : ∅ (d) {(),('Alabama'),()} {(),( word ),()} {(' '),(),()} {( word , ' '),(),()} {(' '),('Alabama'),()} {( word , ' '),('Alabama'),()} {(' '),( word ),()} {( word , ' '),( word ),()} {('in', ' '),(),()} {( lowercase , ' '),(),()} {('in', ' '),('Alabama'),()} {( lowercase , ' '),('Alabama'),()} {('in', ' '),( word ),()} {( low er case , ' '),( word ),()} (e) {( lowercase , ' '),('Alabama'),()} → /[a-z]+ (Alabama)/ Figure 10.",
370,pagesOfTextToDisplay-1.json_370,Regular Expression Inference. (,
371,pagesOfTextToDisplay-1.json_371,a) The user selects text in a cell. (,
372,pagesOfTextToDisplay-1.json_372,b) We tokenize selected and surrounding text.,
373,pagesOfTextToDisplay-1.json_373,"For clarity, the figure only includes two neighboring tokens.",
374,pagesOfTextToDisplay-1.json_374,"For each token, we generate a set of matching labels. (",
375,pagesOfTextToDisplay-1.json_375,c) We enumerate all label sequences matching the text. (,
376,pagesOfTextToDisplay-1.json_376,"d) We then enumerate all candidate before , selection and after combinations.",
377,pagesOfTextToDisplay-1.json_377,Patterns that do not uniquely match the selected text are filtered (indicated by strike-through). (,
378,pagesOfTextToDisplay-1.json_378,"e) Finally, we construct regular expressions for each candidate pattern.",
379,pagesOfTextToDisplay-1.json_379,Ensuring that transforms of the same type are adjacent helps users compare varying parameterizations more easily.,
380,pagesOfTextToDisplay-1.json_380,"First, we consider explicit interactions: if a user chooses a transform from the menu or selects a current working transform, we assign higher rank to transforms of that type.",
381,pagesOfTextToDisplay-1.json_381,"Second, we consider specification difficulty.",
382,pagesOfTextToDisplay-1.json_382,We have observed that row and text selection predicates are harder to specify than other parameters.,
383,pagesOfTextToDisplay-1.json_383,We thus label row and text selections as hard and all others as easy .,
384,pagesOfTextToDisplay-1.json_384,We then sort transform types according to the count of hard parameters they can accept.,
385,pagesOfTextToDisplay-1.json_385,"Third, we rank transform types based on their corpus frequency, conditioned on their initiating user interaction (e.g., text or column selection).",
386,pagesOfTextToDisplay-1.json_386,"In the case of text selection, we also consider the length of the selected text.",
387,pagesOfTextToDisplay-1.json_387,"If a user selects three or fewer characters, split transforms are ranked above extract transforms; the opposite is true for longer selections.",
388,pagesOfTextToDisplay-1.json_388,We then sort transforms within type.,
389,pagesOfTextToDisplay-1.json_389,We first sort transforms by frequency of equivalent transforms in the corpus.,
390,pagesOfTextToDisplay-1.json_390,"Second, we sort transforms in ascending order using a simple measure of transform complexity .",
391,pagesOfTextToDisplay-1.json_391,Our goal is to preferentially rank simpler transforms because users can evaluate their descriptions more quickly.,
392,pagesOfTextToDisplay-1.json_392,We define transform complexity as the sum of complexity scores for each parameter.,
393,pagesOfTextToDisplay-1.json_393,"The complexity of a row selection predicate is the number of clauses it contains (e.g., ""a=5 and b=6"" has complexity 2).",
394,pagesOfTextToDisplay-1.json_394,The complexity of a regular expression is defined to be the number of tokens (described previously) in its description.,
395,pagesOfTextToDisplay-1.json_395,All other parameters are given complexity scores of zero.,
396,pagesOfTextToDisplay-1.json_396,"Finally, we attempt to surface diverse transform types in the final suggestion list.",
397,pagesOfTextToDisplay-1.json_397,"We filter the transforms so that no type accounts for more than 1/3 of the suggestions, unless the transform type matches the working transform or the filter results in fewer suggestions than can appear in the interface.",
398,pagesOfTextToDisplay-1.json_398,"COMPARATIVE EVALUATION WITH EXCEL As an initial evaluation of Wrangler, we conducted a comparative user study with Microsoft Excel.",
399,pagesOfTextToDisplay-1.json_399,"Subjects performed three common data cleaning tasks: value extraction, missing value imputation, and table reshaping.",
400,pagesOfTextToDisplay-1.json_400,Our goal was to compare task completion times and observe data cleaning strategies.,
401,pagesOfTextToDisplay-1.json_401,We chose Excel because it is the most popular data manipulation tool and provides an ecologically valid baseline for comparison: all subjects use it regularly and half selfreport as experts.,
402,pagesOfTextToDisplay-1.json_402,Excel also supports our chosen tasks.,
403,pagesOfTextToDisplay-1.json_403,Neither Potter's Wheel [22] (no support for fill) nor Google Refine [13] (lack of reshaping) support the full set.,
404,pagesOfTextToDisplay-1.json_404,"In contrast, Excel includes specific tools for each task (text-to-columns, goto-special & pivot tables) in addition to manual editing.",
405,pagesOfTextToDisplay-1.json_405,"Participants and Methods We recruited 12 participants, all professional analysts or graduate students who regularly work with data.",
406,pagesOfTextToDisplay-1.json_406,Subjects rated their prior experience with Excel on a 10-point scale (1 being basic knowledge and 10 being expert); the median score was 5.,
407,pagesOfTextToDisplay-1.json_407,Participants had never used the Wrangler interface.,
408,pagesOfTextToDisplay-1.json_408,"We first presented a 10 minute Wrangler tutorial describing how to create, edit, and execute transforms.",
409,pagesOfTextToDisplay-1.json_409,We then asked subjects to complete three tasks (described below) using both Wrangler and Excel.,
410,pagesOfTextToDisplay-1.json_410,We randomized the presentation of tasks and tools across subjects.,
411,pagesOfTextToDisplay-1.json_411,"In each task, we asked subjects to transform a data set into a new format, presented to them as a picture of the final data table.",
412,pagesOfTextToDisplay-1.json_412,Task 1: Extract Text .,
413,pagesOfTextToDisplay-1.json_413,"In this task, we asked users to extract the number of bedrooms and housing price from housing listings on craigslist.",
414,pagesOfTextToDisplay-1.json_414,"The original data set contained one cell for each listing, with all the information in a text string.",
415,pagesOfTextToDisplay-1.json_415,The target data set consisted of two columns: one for the number of bedrooms and one for the housing price.,
416,pagesOfTextToDisplay-1.json_416,Task 2: Fill Missing Values .,
417,pagesOfTextToDisplay-1.json_417,We gave users data containing year-by-year agricultural data for three countries.,
418,pagesOfTextToDisplay-1.json_418,Some of the values in the data set were blank.,
419,pagesOfTextToDisplay-1.json_419,The target data set contained the same data with all missing values replaced with the closest non-empty value from a previous year.,
420,pagesOfTextToDisplay-1.json_420,1 Task 3: Reshape Table Structure .,
421,pagesOfTextToDisplay-1.json_421,"Users started with three columns of housing data: year, month, and price.",
422,pagesOfTextToDisplay-1.json_422,"The target data set contained the same data formatted as a cross-tab: the data contained one row for each year, with the 12 months as column headers and housing prices as cell values.",
423,pagesOfTextToDisplay-1.json_423,"When using Excel, we allowed subjects to ask for references to functions they could describe concretely (e.g., we would answer ""how do I split a cell?""",
424,pagesOfTextToDisplay-1.json_424,"but not ""how do I get the number of bedrooms out?"" ).",
425,pagesOfTextToDisplay-1.json_425,"For Wrangler tasks, we did not respond to user inquiries.",
426,pagesOfTextToDisplay-1.json_426,We permitted a maximum of 10 minutes per task.,
427,pagesOfTextToDisplay-1.json_427,Each data set had at most 30 rows and 4 columns; complete manual manipulation in Excel was easily attainable within the time limits.,
428,pagesOfTextToDisplay-1.json_428,"Afterwards, each user completed a post-study questionnaire.",
429,pagesOfTextToDisplay-1.json_429,"1 We acknowledge that this is not an ideal cleaning solution for the data, but it nonetheless served as a useful test.",
430,pagesOfTextToDisplay-1.json_430,0 1 2 3 4 5 6 7 8 9 10 T1 T2 T3 User Study Task Completion Time (minutes) Wrangler Excel Figure 11.,
431,pagesOfTextToDisplay-1.json_431,Task completion times.,
432,pagesOfTextToDisplay-1.json_432,Black bars indicate median values.,
433,pagesOfTextToDisplay-1.json_433,Median Wrangler performance is over twice as fast in all tasks.,
434,pagesOfTextToDisplay-1.json_434,"Wrangler Accelerates Transform Specification We performed a repeated-measures ANOVA of completion times with task, tool, and Excel novice/expert 2 as independent factors; we log-transformed responses to better approximate a normal distribution.",
435,pagesOfTextToDisplay-1.json_435,"We found a significant main effect of tool ( F 1 , 54 = 23.65, p< 0.001), but no main effect of task ( F 1 , 54 = 0.01, p = 0.943) or expertise ( F 1 , 54 = 0.30, p = 0.596).",
436,pagesOfTextToDisplay-1.json_436,"We found a significant interaction effect of task and expertise ( F 1 , 54 = 11.10, p< 0.002) driven by improved performance by experts (regardless of tool) in the reshaping task (T3).",
437,pagesOfTextToDisplay-1.json_437,No other interactions were significant.,
438,pagesOfTextToDisplay-1.json_438,"Across all tasks, median performance in Wrangler was over twice as fast as Excel (Fig.",
439,pagesOfTextToDisplay-1.json_439,11).,
440,pagesOfTextToDisplay-1.json_440,"Users completed the cleaning tasks significantly more quickly with Wrangler than with Excel, and this speed-up benefitted novice and expert Excel users alike.",
441,pagesOfTextToDisplay-1.json_441,"Moreover, the user study tasks involved small data sets amenable to manual manipulation.",
442,pagesOfTextToDisplay-1.json_442,"As data set size grows, we expect the benefits of Wrangler to come into even sharper relief.",
443,pagesOfTextToDisplay-1.json_443,"Of course, larger data sets might complicate the process of assessing transform effects and so may benefit from additional validation and visualization techniques.",
444,pagesOfTextToDisplay-1.json_444,"Strategies for Navigating Suggestion Space When working with Wrangler, users applied different navigation strategies for different tasks.",
445,pagesOfTextToDisplay-1.json_445,These strategies were largely consistent across users.,
446,pagesOfTextToDisplay-1.json_446,"For text selection, users frequently provided multiple examples.",
447,pagesOfTextToDisplay-1.json_447,"For other operations, users performed an initial selection and then previewed each suggestion.",
448,pagesOfTextToDisplay-1.json_448,"One subject noted, ""I just look at the picture.""",
449,pagesOfTextToDisplay-1.json_449,"Users with a programming background spent time reading transform descriptions, whereas the other users relied almost entirely on the previews.",
450,pagesOfTextToDisplay-1.json_450,"When users did not find a transform among the initial suggestions, they most often filtered the suggestions by selecting a transform type from the menu.",
451,pagesOfTextToDisplay-1.json_451,"If only imperfect matches were found, users then selected the nearest transform and edited its parameters.",
452,pagesOfTextToDisplay-1.json_452,"In other words, users turned to manual parameterization only as a last resort.",
453,pagesOfTextToDisplay-1.json_453,"Our post-study questionnaire asked users to rate automated suggestions, visual previews, and direct editing of transforms on a scale from 1 (not useful) to 5 (most useful).",
454,pagesOfTextToDisplay-1.json_454,"We performed an ANOVA and found a significant difference among the ratings ( F 2 , 33 = 17.33, p< 0.001).",
455,pagesOfTextToDisplay-1.json_455,"Users rated previews ( μ = 4.8) and suggestions ( μ = 4.3) significantly more useful than direct editing ( μ = 2.5) ( p< 0.001 in both cases by 2 We divided subjects into ""novices"" and ""experts"" according to their median self-reported expertise rating (5).Tukey's HSD).",
456,pagesOfTextToDisplay-1.json_456,Users' preference for suggestions and previews over direct editing provides evidence that these novel user interface features have merit.,
457,pagesOfTextToDisplay-1.json_457,"Users' navigation strategies worked well when they understood the nature of the desired transform, even if they did not know how to specify it.",
458,pagesOfTextToDisplay-1.json_458,"However, we found that users of both tools experienced difficulty when they lacked a conceptual model of the transform.",
459,pagesOfTextToDisplay-1.json_459,"For instance, Task 3 exhibited an uneven distribution of completion times; 7 of the 10 fastest times and 3 of the 4 slowest times were in Wrangler.",
460,pagesOfTextToDisplay-1.json_460,"Wrangler does not provide the recourse of manual editing, hence users who got stuck fared slightly better in Excel.",
461,pagesOfTextToDisplay-1.json_461,"However, those familiar with pivot operations in Excel uniformly performed the task more quickly with Wrangler.",
462,pagesOfTextToDisplay-1.json_462,"We also observed one recurring pitfall: a few users got stuck in a ""cul-de-sac"" of suggestion space by incorrectly filtering (e.g., by selecting a specific transform type from the menu).",
463,pagesOfTextToDisplay-1.json_463,"When this happened, some users kept searching and refining only these filtered transforms.",
464,pagesOfTextToDisplay-1.json_464,"By design, Wrangler does not afford users the same flexibility to layout data as in Excel; since users cannot perform arbitrary editing in Wrangler, the recourse is less obvious when they get stuck.",
465,pagesOfTextToDisplay-1.json_465,"This pitfall was most common in Task 3, where a user might mistakenly filter all but fold operations when an unfold operation was needed.",
466,pagesOfTextToDisplay-1.json_466,"One solution may be to suggest non-matching transforms related to the selected transform type, in effect treating filtering criteria as guidelines rather than strict rules.",
467,pagesOfTextToDisplay-1.json_467,"CONCLUSION AND FUTURE WORK This paper introduced Wrangler, an interface and underlying language for data transformation.",
468,pagesOfTextToDisplay-1.json_468,The system provides a mixed-initiative interface that maps user interactions to suggested data transforms and presents natural language descriptions and visual transform previews to help assess each suggestion.,
469,pagesOfTextToDisplay-1.json_469,"With this set of techniques, we find that users can rapidly navigate to a desired transform.",
470,pagesOfTextToDisplay-1.json_470,"Our user study demonstrates that novice Wrangler users can perform data cleaning tasks significantly faster than in Excel, an effect shared across both novice and expert Excel users.",
471,pagesOfTextToDisplay-1.json_471,"We found that users are comfortable switching navigation strategies in Wrangler to suit a specific task, but can sometimes get stuck—in either tool—if they are unfamiliar with the available transforms.",
472,pagesOfTextToDisplay-1.json_472,"Future work should help users form data cleaning strategies, perhaps through improved tutorials.",
473,pagesOfTextToDisplay-1.json_473,"Looking forward, Wrangler addresses only a subset of the hurdles faced by data analysts.",
474,pagesOfTextToDisplay-1.json_474,"As data processing has become more sophisticated, there has been little progress on improving the tedious parts of the pipeline: data entry, data (re)formatting, data cleaning, etc.",
475,pagesOfTextToDisplay-1.json_475,"The result is that people with highly specialized skills (e.g., statistics, molecular biology, micro-economics) spend more time in tedious ""wrangling"" tasks than they do in exercising their specialty, while less technical audiences such as journalists are unnecessarily shut out.",
476,pagesOfTextToDisplay-1.json_476,"We believe that more research integrating methods from HCI, visualization, databases, and statistics can play a vital role in making data more accessible and informative.",
